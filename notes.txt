Programming language
----------------------
it is a set of rules and syntax used to write code that a computer can understand.
ex: py, java, c, c#, c++, ruby, JavaScript.

JavaScript
------------

it is especially used to make web pages interactive. 
it is a versatile and high level programming language.

interactive--> JS allowing user to actively engage and communicate with a system.
versatile---> frontend, backend, game, app...

JS code will get executed only within browser. ex: chrome, MS edge, fire fox... 


syntax 
---------
";"--> after every instruction.

Extension for JS files ---> .js 
console.log("I like you")


Inserting JS into HTML
-------------------------
Using Script tag

Developer Tools---> ctrl + shift + i.


typeOf value---> dataType of that value.

Variables
------------
it is simply a container that stores data.

keywords to create data
------------------------
1) var
2) let 
3) const 

var, let ---> mutable (values van be changed.)
const ---> immutable (values cannot be changed)

DataTypes
-------------
Primitive DataTypes 
------------------------
Number--> Integer(whole numbers) and Float(1.2323,0.3435,-8.00)
-------
parseInt("4636").
paseFloat("3.14rebge")
num.toFixed(n).
num.toString()
num.charAt(n)
num.slice(start, end)

String--> '', "", ``. collection of characters.
------
str.length;
str.toUpperCase();
str.toLowerCase();
str.includes("wo");

Concatination---> attaching two strings. '+'
Template Literals---> inserting variiables in a string(``)

Boolean--> true or false.
undefined--> when the variable is create. but not assigned with a value.
null--> intensional absence.



Reference DataTypes 
------------------------

Function
------------
function is a reusable block of code designed to perform a specific task.

using(calling) (invoking)---> name()

Types of functions 
-----------------------

named functions(function declaration)----> function name(){ //block of code }
---> can be used before creating it.(Hoisting)

Function Expression ----> const name = () = > {//block of code }
--> Function is stored in a variable.
--> not hoisted.

Arrow Function ---> ()=>{//block of code}
--> no name.


Parameters and Arguments
-----------------------------

P--> variables listed in the function definition
A--> actual values passed when calling the function.
function add(a, b) {
  console.log(a + b);
}

add(55, 45);
add(155, 45);

Return keyword in function----> ends function execution.
                                can return avalue to function caller.

Callback Functions and Higher order Functions.
-------------------------------------------------

cb--> a function that is passed as an argument to another function.


Arrays
---------
used to store multiple values in single variable.
 syntax---> [val1, val2, val3.......]

 Accessing Values
 ----------------
 arr[0]
 .length---> returns length of an array.

 Methods that alter original array.
 -------------------------------------

1)push(val)---> addes value to the end
2)pop()---> removes last element
3)unshift(val)--->adds element at the beginning of an array. 
4)shift()--->removes first element.
5)splice(start, delete count, elem1, elem2....)
6)sort()---> asc or desc arrangement.
7)reverse()---> reversing the array.


Methods That doesnot
---------------------
concat()---> arr1.concat(arr2)
slice(art, end)---> extracts part of array.
join()--->string of array elements.
includes(val)---> returns a boolean value.
indexOf(val)---> returns index value


map---> transform each items and returns new array.
syntax
-------
arr.map((item,ind)=>{
    return val
})

filter--->  returns a new array with filtered values.

[324432,234,3,132,56]
[324432,234,132,56]

syntax
-------
arr.filter((item,ind)=>{
    return condition;
})

reduce----> single value.
syntax 
-------

arr.reduce((acc,item,ind)=>{},initial value of acc).


Objects
----------
it is a collection of key-value pairs.

keys are string.
values can be any datatype.

syntax:
---------

{
    key1:vaule,
    key2:value,
    .
    .
    .
}

accessing values
----------------
. ---> obj.key
[] ---> obj["key"] 

Methods of Objects
-------------------

Object.keys(objName)--> return an array that holds the keys of that obj.

Object.values(objName)--> return an array that holds the values of that obj.


Operations in JS.
-------------------

Arithmetic Operation 
-------------------------

Add--> +
Sub--> -
Mul--> *
Div--> /
Modulo--> %(reminder)
Expo-> ** power 
Increment ---> ++var(pre inc), var++(post inc)
Decrement ---> --var(pre dec), var--(post dec)

Assignment Operation
---------------------

= --> assignig value to variable.
+= --> inc and assign
-= --> dec and assign
*= --> mul and assign
/= --> div and assign


Comparison Operators (Results Boolean Values)
---------------------

Loose Equality--> "==" (only values matters)
Strict Equality--> "==="(both datatype and value matter).
Not Equal ---> != 

greater than--> > 
less than --> <
greater than or equal to --> >=
less than or equal to --> <=


Logical Operator 
-------------------
Operaties with booleans and return a Boolean.

AND---> (&&) If Both are true ---> true, else---> false
OR----> (||) Any one has to be true--> true, both false---> false.
NOT---> (!) inverting the value

BODMAS--> Bracket, Of, Division, Multiplication, Add, Sub.



Conditional Clauses (if, else, else if)
----------------------

usedto execute different blocks of code based on conditions.

syntax
----------

if(condition){
    // block of code
}else  if {

}else{

}

Ternary Operator 
--------------------
shorthand for if else

syntax 
----------

expression ? command1 : command2


Loops in JS 
-------------

Repeats a block of code multiple times until the specified condition is met.

For loop 
-----------
number of iteration is known.

syntax 
--------

for(init ; condition; increment){
    //block of code
}

While Loop 
------------
number of iteration is not known.

syntax 
-------
while(condition){
    //block of code
}

do... while loop 
-------------------

 do {
    //block of code
 } while (condition)

 for..in and for...of 
 ------------------------

 for.. of 
 --------
 used to loop over values of an iterable.(arrays and string)

for ...in 
------------
over the keys in an object. (obj)


Truthy and Falsy Values 
--------------------------
Truthy 
-------
true,
numbers otherthan 0.
non empty string.
object {},
array [].


Falsy 
------
false,
0,
""(empty string),
null,
undefined,
NaN



Destructuring
-------------
lets you extract values from arrays and objects.
let arr = [243, 234, 35];
let { fName, lNAme, list } = obj;


Spread (...)
-------
used to spread(expand) elements from arrays or obj.